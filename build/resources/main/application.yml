# ========================================
# 音乐播放器后端服务配置文件
# 版本: 1.0.0
# 环境: 开发环境
# ========================================

# 应用信息配置
application:
  # 应用版本
  version: 1.0.0
  # 应用描述
  description: 企业级音乐播放器后端服务
  # 开发团队
  team: Music Server Development Team
  # 联系邮箱
  contact: support@musicserver.com
  # 项目主页
  homepage: https://github.com/musicserver/music-server
  # 许可协议
  license: MIT License

server:
  # 服务端口配置
  port: 8080
  servlet:
    context-path: /api
    encoding:
      charset: UTF-8
      enabled: true
      force: true
  # Tomcat配置
  tomcat:
    uri-encoding: UTF-8
    max-threads: 200
    min-spare-threads: 10
    connection-timeout: 5000ms

spring:
  # 应用基本信息
  application:
    name: music-server
    
  # Banner配置
  main:
    # 启用自定义banner
    banner-mode: console
    # 延迟初始化
    lazy-initialization: false
    # 是否注册关闭钩子
    register-shutdown-hook: true
  
  # 环境配置
  profiles:
    active: dev
  
  # 数据源配置
  datasource:
    driver-class-name: com.mysql.cj.jdbc.Driver
    url: jdbc:mysql://localhost:3306/music_server?useUnicode=true&characterEncoding=utf8&zeroDateTimeBehavior=convertToNull&useSSL=false&serverTimezone=Asia/Shanghai&allowPublicKeyRetrieval=true
    username: root
    password: root
    # Druid连接池配置
    druid:
      # 初始连接数
      initial-size: 10
      # 最小连接池数量
      min-idle: 10
      # 最大连接池数量
      max-active: 20
      # 配置获取连接等待超时的时间
      max-wait: 60000
      # 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒
      time-between-eviction-runs-millis: 60000
      # 配置一个连接在池中最小生存的时间，单位是毫秒
      min-evictable-idle-time-millis: 300000
      # 配置一个连接在池中最大生存的时间，单位是毫秒
      max-evictable-idle-time-millis: 900000
      # 配置检测连接是否有效
      validation-query: SELECT 1 FROM DUAL
      test-while-idle: true
      test-on-borrow: false
      test-on-return: false
      # 打开PSCache，并且指定每个连接上PSCache的大小
      pool-prepared-statements: true
      max-pool-prepared-statement-per-connection-size: 20
      # 配置监控统计拦截的filters，去掉后监控界面sql无法统计，'wall'用于防火墙
      filters: stat,wall,slf4j
      # 通过connectProperties属性来打开mergeSql功能；慢SQL记录
      connection-properties: druid.stat.mergeSql\=true;druid.stat.slowSqlMillis\=5000
      # 配置DruidStatFilter
      web-stat-filter:
        enabled: true
        url-pattern: "/*"
        exclusions: "*.js,*.gif,*.jpg,*.bmp,*.png,*.css,*.ico,/druid/*"
      # 配置DruidStatViewServlet
      stat-view-servlet:
        enabled: true
        url-pattern: "/druid/*"
        # IP白名单(没有配置或者为空，则允许所有访问)
        allow: 127.0.0.1,192.168.163.1
        # IP黑名单 (存在共同时，deny优先于allow)
        deny: 192.168.1.73
        # 禁用HTML页面上的"Reset All"功能
        reset-enable: false
        # 登录名
        login-username: admin
        # 登录密码
        login-password: 123456
  
  # Redis配置
  data:
    redis:
      host: localhost
      port: 6379
      password: 
      database: 0
      timeout: 5000ms
      lettuce:
        pool:
          # 连接池最大连接数
          max-active: 8
          # 连接池最大阻塞等待时间（使用负值表示没有限制）
          max-wait: -1ms
          # 连接池中的最大空闲连接
          max-idle: 8
          # 连接池中的最小空闲连接
          min-idle: 0
        shutdown-timeout: 100ms
  
  # Jackson配置
  jackson:
    date-format: yyyy-MM-dd HH:mm:ss
    time-zone: GMT+8
    serialization:
      write-dates-as-timestamps: false
      fail-on-empty-beans: false
    deserialization:
      fail-on-unknown-properties: false
    default-property-inclusion: non_null
  
  # 文件上传配置
  servlet:
    multipart:
      enabled: true
      max-file-size: 100MB
      max-request-size: 100MB
  
  # 国际化配置
  messages:
    basename: i18n/messages
    encoding: UTF-8
    cache-duration: 3600

# MyBatis Plus配置
mybatis-plus:
  # 配置扫描通用枚举，支持统一注入自定义转换器
  type-enums-package: com.musicserver.enums
  # 启动时是否检查MyBatis XML文件的存在
  check-config-location: true
  # MyBatis原生配置
  configuration:
    # 字段名称下划线转驼峰命名
    map-underscore-to-camel-case: true
    cache-enabled: true
    call-setters-on-nulls: true
    jdbc-type-for-null: 'null'
    # 打印SQL语句到控制台
    log-impl: org.apache.ibatis.logging.stdout.StdOutImpl
  global-config:
    # 关闭MP3.0自带的banner
    banner: true
    db-config:
      # 主键类型（AUTO:"数据库ID自增" INPUT:"用户输入ID" ID_WORKER:"全局唯一ID" UUID:"全局唯一ID"）
      id-type: AUTO
      # 字段策略（IGNORED:"忽略判断" NOT_NULL:"非NULL判断" NOT_EMPTY:"非空判断"）
      insert-strategy: NOT_NULL
      update-strategy: NOT_NULL
      select-strategy: NOT_NULL
      # 驼峰下划线转换
      table-underline: true
      # 逻辑删除配置
      logic-delete-field: deleted
      logic-delete-value: 1
      logic-not-delete-value: 0
  # 搜索指定包别名
  type-aliases-package: com.musicserver.entity
  # 配置mapper的扫描，找到所有的mapper.xml映射文件
  mapper-locations: classpath:mapper/*.xml

# 日志配置
logging:
  config: classpath:logback-spring.xml
  level:
    com.musicserver: debug
    org.springframework.security: debug
    org.mybatis: debug
    com.baomidou.mybatisplus: debug
  pattern:
    console: "%d{HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n"
    file: "%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{50} - %msg%n"

# JWT配置
jwt:
  # JWT密钥
  secret: musicServerJwtSecretKey2025MusicPlayerBackendService
  # JWT过期时间（秒），默认7天
  expiration: 604800
  # JWT刷新时间（秒），默认3天
  refresh-expiration: 259200
  # JWT请求头
  header: Authorization
  # JWT令牌前缀
  token-prefix: "Bearer "
  # 是否允许刷新令牌
  allow-refresh: true

# Minio对象存储配置
minio:
  # 是否启用Minio
  enabled: true
  # Minio服务器端点
  endpoint: localhost:9000
  # 访问密钥
  access-key: admin
  # 秘密访问密钥
  secret-key: admin123456
  # 是否使用HTTPS
  secure: false
  # 连接超时时间（毫秒）
  connect-timeout: 10000
  # 写入超时时间（毫秒）
  write-timeout: 60000
  # 读取超时时间（毫秒）
  read-timeout: 10000
  
  # 存储桶配置
  bucket:
    # 默认存储桶
    name: music-server
    # 音乐文件存储桶
    music: music-files
    # 图片文件存储桶
    image: image-files
    # 歌词文件存储桶
    lyric: lyric-files
    # 临时文件存储桶
    temp: temp-files
    # 是否自动创建存储桶
    auto-create: true
    # 默认存储桶权限
    default-policy: private
  
  # 文件上传配置
  upload:
    # 单个文件最大大小（字节），默认100MB
    max-file-size: 104857600
    # 允许的音乐文件类型
    allowed-music-types:
      - audio/mpeg
      - audio/mp3
      - audio/wav
      - audio/flac
      - audio/aac
      - audio/ogg
      - audio/m4a
    # 允许的图片文件类型
    allowed-image-types:
      - image/jpeg
      - image/jpg
      - image/png
      - image/gif
      - image/webp
      - image/bmp
    # 允许的歌词文件类型
    allowed-lyric-types:
      - text/plain
      - application/x-subrip
      - text/lrc
    # 文件名生成策略：uuid、timestamp、original
    filename-strategy: uuid
    # 是否保留原始文件扩展名
    keep-original-extension: true
    # 文件上传路径模板
    path-template: "{type}/{year}/{month}/{day}"
    # 预签名URL有效期（秒）
    presigned-url-expiry: 3600

# Knife4j接口文档配置
knife4j:
  enable: true
  openapi:
    title: 音乐播放器后端服务API
    description: 企业级音乐播放器APP后端服务接口文档
    email: developer@musicserver.com
    concat: 开发团队
    url: https://www.musicserver.com
    version: v1.0.0
    license: Apache 2.0
    license-url: https://www.apache.org/licenses/LICENSE-2.0
    terms-of-service-url: https://www.musicserver.com/terms
  setting:
    language: zh_cn
    enable-version: true
    enable-swagger-models: true
    enable-document-manage: true
    swagger-model-name: 实体类列表
    enable-reload-cache-parameter: true
    enable-after-script: true
    enable-filter-multipart-api-method-type: POST
    enable-filter-multipart-apis: false
    enable-request-cache: true
    enable-host: false
    enable-host-text: 192.168.0.193:8080

# 应用自定义配置
app:
  # 文件存储配置
  file:
    # 文件上传路径
    upload-path: /data/music-server/uploads/
    # 静态资源访问路径
    static-access-path: /static/**
    # 静态资源映射路径
    static-location: file:/data/music-server/uploads/
    # 允许的文件类型
    allowed-types: mp3,flac,wav,aac,m4a,ogg,jpg,jpeg,png,gif,webp,lrc,txt
    # 最大文件大小（MB）
    max-size: 100
  
  # 缓存配置
  cache:
    # 默认缓存时间（秒）
    default-ttl: 3600
    # 用户信息缓存时间（秒）
    user-ttl: 1800
    # 音乐信息缓存时间（秒）
    music-ttl: 7200
    # 播放列表缓存时间（秒）
    playlist-ttl: 3600
  
  # 安全配置
  security:
    # 密码加密轮数
    bcrypt-rounds: 10
    # 登录失败最大次数
    max-login-attempts: 5
    # 账户锁定时间（秒）
    account-lock-duration: 1800
  
  # 业务配置
  business:
    # 推荐音乐数量
    recommend-limit: 20
    # 热门音乐数量
    hot-music-limit: 50
    # 搜索结果限制
    search-limit: 100
    # 播放历史保留天数
    history-keep-days: 365

# WebSocket配置
websocket:
  # 是否启用WebSocket
  enabled: true
  # 连接配置
  connection:
    # 最大连接数
    max-connections: 1000
    # 连接超时时间（毫秒）
    connect-timeout: 30000
    # 会话超时时间（分钟）
    session-timeout: 30
  # 消息配置
  message:
    # 最大消息大小（字节）
    max-size: 1048576
    # 消息缓冲区大小
    buffer-size: 8192
    # 心跳间隔（秒）
    heartbeat-interval: 30
  # 房间配置
  room:
    # 房间最大成员数
    max-members: 50
    # 房间过期时间（分钟）
    expire-time: 60
    # 房间清理间隔（分钟）
    cleanup-interval: 10
  # 通知配置
  notification:
    # 通知过期时间（小时）
    expire-time: 24
    # 用户最大通知数
    max-per-user: 50
  # STOMP配置
  stomp:
    # 应用程序目标前缀
    app-destination-prefix: /app
    # 用户目标前缀
    user-destination-prefix: /user
    # 代理目标前缀
    broker-relay:
      - /topic
      - /queue
      - /user

# 健康检查配置
management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics,prometheus
  endpoint:
    health:
      show-details: when_authorized
  info:
    env:
      enabled: true

# IP定位服务配置
ip-location:
  # 是否启用IP定位功能
  enabled: true
  # 是否启用缓存
  enable-cache: true
  # 是否启用统计功能
  enable-statistics: true
  # 是否启用IP拦截器
  enable-interceptor: true
  # ip2region数据库文件路径
  database-path: ip2region/ip2region.xdb
  
  # 缓存配置
  cache:
    # 缓存过期时间（小时）
    expire-time: 24
    # 最大缓存数量
    max-size: 10000
    # 缓存key前缀
    key-prefix: "ip_location:"
    # 是否启用本地缓存
    enable-local-cache: true
    # 本地缓存最大数量
    local-cache-max-size: 1000
    # 本地缓存过期时间（分钟）
    local-cache-expire-minutes: 30
  
  # 统计配置
  statistics:
    # 统计数据保留天数
    retention-days: 30
    # 是否启用实时统计
    enable-real-time: true
    # 统计批量大小
    batch-size: 100
    # 统计刷新间隔（秒）
    flush-interval: 60
    # 是否启用异步统计
    enable-async: true
    # 异步线程池大小
    async-thread-pool-size: 4
  
  # 性能配置
  performance:
    # 查询超时时间（毫秒）
    query-timeout: 5000
    # 是否启用异步查询
    enable-async-query: false
    # 异步查询线程池大小
    async-thread-pool-size: 8
    # 最大并发查询数
    max-concurrent-queries: 100
  
  # 安全配置
  security:
    # 是否启用IP白名单
    enable-whitelist: false
    # IP白名单
    whitelist:
      - "127.0.0.1"
      - "::1"
    # 是否启用IP黑名单
    enable-blacklist: false
    # IP黑名单
    blacklist: []
    # 是否启用内网IP过滤
    filter-private-ip: false
    # 是否启用风险IP检测
    enable-risk-detection: true
    # 风险IP检测阈值
    risk-threshold: 1000
    # 是否启用自动封禁
    enable-auto-ban: false
    # 自动封禁阈值
    auto-ban-threshold: 10000
    # 封禁时长（小时）
    ban-duration-hours: 24
  
  # 限流配置
  rate-limit:
    # 是否启用查询限流
    enable-query-rate-limit: true
    # 每IP查询限制（次/分钟）
    query-limit-per-ip: 60
    # 全局查询限制（次/分钟）
    global-query-limit: 10000
    # 限流时间窗口（秒）
    rate-limit-window: 60
    # 是否启用突发查询控制
    enable-burst-control: true
    # 突发查询阈值
    burst-threshold: 100

# 限流配置
rate-limit:
  # 启用限流功能
  enabled: true
  # 启用限流日志
  enable-log: true
  # 启用限流监控
  enable-monitor: true
  # 限流key前缀
  key-prefix: rate_limit
  # 默认限流策略
  default-strategy: sliding_window
  # 默认限流类型
  default-type: global
  # 默认限流次数
  default-limit: 100
  # 默认时间窗口（秒）
  default-period: 60
  
  # Redis配置
  redis:
    # Redis Key过期时间（秒）
    expire-time: 7200
    # Lua脚本缓存时间（秒）
    script-cache-time: 3600
    # Redis连接超时时间（毫秒）
    connection-timeout: 5000
    # Redis执行超时时间（毫秒）
    command-timeout: 3000
    # 启用Redis管道
    enable-pipeline: false
    # 管道批量大小
    pipeline-batch-size: 100
  
  # 全局限流配置
  global:
    enabled: true
    limit: 10000
    period: 60
    strategy: sliding_window
  
  # IP限流配置
  ip:
    enabled: true
    limit: 1000
    period: 60
    strategy: sliding_window
    # IP白名单
    whitelist:
      - 127.0.0.1
      - ::1
      - localhost
    # IP黑名单
    blacklist: []
    # 启用地理位置限流
    enable-geo-limit: false
  
  # 用户限流配置
  user:
    enabled: true
    limit: 500
    period: 60
    strategy: token_bucket
    # 角色限流配置
    roles:
      ADMIN:
        limit: 2000
        period: 60
        strategy: token_bucket
      USER:
        limit: 500
        period: 60
        strategy: sliding_window
      GUEST:
        limit: 100
        period: 60
        strategy: fixed_window
  
  # API限流配置
  api:
    enabled: true
    limit: 200
    period: 60
    strategy: fixed_window
    # 特定API限流配置
    specific-apis:
      login:
        pattern: /api/auth/login
        limit: 5
        period: 300  # 5分钟
        strategy: fixed_window
        enabled: true
      register:
        pattern: /api/auth/register
        limit: 3
        period: 600  # 10分钟
        strategy: fixed_window
        enabled: true
      upload:
        pattern: /api/file/upload
        limit: 50
        period: 60
        strategy: token_bucket
        enabled: true
  
  # 热点数据限流配置
  hotspot:
    enabled: true
    # 热点检测阈值
    detection-threshold: 200
    # 热点检测时间窗口（秒）
    detection-window: 300
    # 热点限流阈值
    hotspot-limit: 50
    # 热点限流时间窗口（秒）
    hotspot-period: 60
    # 热点数据过期时间（秒）
    hotspot-expire-time: 3600
    # 最大热点数据数量
    max-hotspots: 1000
  
  # 策略配置
  strategy:
    # 滑动窗口配置
    sliding-window:
      default-slices: 60
      max-slices: 3600
      min-slices: 10
    # 令牌桶配置
    token-bucket:
      default-capacity: 100
      default-refill-rate: 10.0
      default-warmup-period: 0
      max-capacity: 10000
      max-refill-rate: 1000.0
    # 漏桶配置
    leaky-bucket:
      default-capacity: 100
      default-leak-rate: 10.0
      max-capacity: 10000
      max-leak-rate: 1000.0
    # 固定窗口配置
    fixed-window:
      default-window-size: 60
      max-window-size: 3600
      min-window-size: 1
    # 计数器配置
    counter:
      default-reset-interval: 60
      max-reset-interval: 86400
      min-reset-interval: 1
  
  # 自定义限流规则
  custom-rules:
    api-heavy:
      name: 重要API限流规则
      key-expression: "'api_heavy_' + #request.getRequestURI()"
      limit: 50
      period: 60
      strategy: token_bucket
      type: api
      condition: "#request.getRequestURI().contains('/api/heavy/')"
      enabled: true
      priority: 1
      description: 针对重要API的特殊限流规则